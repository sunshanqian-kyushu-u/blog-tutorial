---
import { Icon } from 'astro-icon/components'
import { siteConfig, NavbarLinks } from '../config'
---

<!-- 外面套一层是因为方便使用 mx-auto -->
<!-- 不然的话要使用 md:mx-4，与 mx-auto 冲突 -->
<div class="max-w-[75rem] md:px-4 mx-auto top-0 sticky">
    <!-- 下面这个 div 是为了给悬浮窗定位用 -->
    <div class="relative">
        <div class="flex items-center bg-[var(--card-bg)] md:h-[4.5rem] h-16 md:px-4 px-3.5 
        rounded-2xl rounded-t-none justify-between transition-all">
            <!-- 房子图标 -->
            <a href="/" class="flex items-center text-[var(--primary)] md:h-[3.25rem] h-12 md:px-5 px-4 
            md:rounded-lg rounded-md hover:bg-[var(--btn-bg-hover)] active:bg-[var(--btn-bg-active)] 
            active:scale-95 transition-all">
                <Icon name="material-symbols:home-outline-rounded" 
                class="md:text-[1.75rem] text-2xl md:mr-2 mr-[0.25rem] mb-1"/>
                <p class="md:text-[0.875rem] text-[0.825rem] font-bold">
                    {siteConfig.subtitle}
                </p>
            </a>
            <!-- Home, Archive, About, GitHub 按钮 -->
            <div class="flex">
            {
                NavbarLinks.map(link => (
                    <a href={link.url} target={link.external ? "_blank" : null} class="group md:flex 
                    hidden items-center h-[3.25rem] px-5 rounded-lg hover:bg-[var(--btn-bg-hover)] 
                    active:bg-[var(--btn-bg-active)] active:scale-95 transition-all">
                        <p class="text-[var(--btn-text)] group-hover:text-[var(--primary)] text-sm 
                        font-bold">{link.name}</p>
                        {link.external && <Icon name="fa6-solid:arrow-up-right-from-square"
                        class="text-[0.875rem] text-[var(--github-icon)] ml-1 mb-1"/>}
                    </a>
                ))
            }
            </div>
            <!-- 剩下的部分 -->
            <div class="flex items-center">
                <!-- 搜索框 -->
                <div class="lg:flex hidden items-center bg-[var(--search-bg)] h-12 mr-2 rounded-lg 
                hover:bg-[var(--search-bg-hover-focus)] focus-within:bg-[var(--search-bg-hover-focus)] 
                transition-all">
                    <Icon name="material-symbols:search"
                    class="absolute text-[var(--search-icon)] text-[1.25rem] ml-3 pointer-events-none"/>
                    <input placeholder="Search" class="bg-transparent w-40 active:w-60 focus:w-60 
                    h-full pl-10 outline-0 text-[var(--search-text)] text-sm transition-all">
                </div>
                <!-- 搜索按钮 -->
                <button class="flex items-center justify-center group lg:hidden w-11 h-11 rounded-lg 
                hover:bg-[var(--btn-bg-hover)] active:scale-95 transition-all">
                    <Icon name="material-symbols:search" class={`md:text-xl text-base 
                    text-[var(--btn-text)] group-hover:text-[var(--primary)]`}/>
                </button>
                <!-- 调色板按钮 -->
                <button id="palette-btn" class="flex items-center justify-center group w-11 h-11 rounded-lg 
                hover:bg-[var(--btn-bg-hover)] active:scale-95 transition-all">
                    <Icon name="material-symbols:palette-outline" class={`md:text-xl text-base 
                    text-[var(--btn-text)] group-hover:text-[var(--primary)]`}/>
                </button>
                <!-- 调色板悬浮窗 -->
                <!-- 悬浮窗会根据上面的有 relative 的 div 进行定位 -->
                <div id="palette" class="absolute bg-[var(--card-bg)] w-80 md:right-4 right-0 px-4 py-4 md:top-[5.25rem] top-[4.125rem]
                rounded-2xl shadow-xl dark:shadow-none md:scale-100 scale-90 float-panel-closed transition-all">
                    <!--第一行容器 -->
                    <div class="flex items-center before:w-1 before:h-4 before:rounded-md 
                    before:bg-[var(--primary)] gap-2 mb-3">
                        <p class="font-bold select-none">Theme Color</p>
                        <button id="reset-btn" class="flex items-center justify-center bg-[var(--btn-regular-bg)] 
                        hover:bg-[var(--btn-regular-bg-hover)] active:bg-[var(--btn-regular-bg-active)]
                        active:scale-95 w-7 h-7 rounded-md">
                            <Icon name="fa6-solid:arrow-rotate-left" 
                            class="text-[var(--btn-content)] text-[0.875rem]"/>
                        </button>
                        <!-- hue 显示 -->
                        <p id="hue-display" class="flex items-center justify-center bg-[var(--btn-regular-bg)] w-10 h-7 
                        rounded-md text-[var(--btn-content)] text-sm ml-auto select-none">250</p>
                    </div>
                    <!-- 下面的拖动条 -->
                    <input id="slider" type="range" min="0" max="360" class="slider">
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    /**
     * 调色板代码
     * 
     * 要实现：
     * 1. 点击调色板按钮开闭调色板悬浮窗
     * 2. 点击调色板悬浮窗外部则关闭悬浮窗
     * 3. 滑动滑动条让 --hue 的值改变
     * 4. 初始化功能
     * 
     * 备注：
     * 1. 本来想通过 getComputedStyle(document.documentElement).getPropertyValue("--hue")
     *    直接修改 --hue，但是这个值无法保存到 css 文件中，刷新后就没了
     *    所以还是要本地存储，但是 localStorage.getItem() 会造成闪烁，因此用 cookie 的方法
     */
    const slider = document.getElementById("slider") as HTMLInputElement;
    const hue_display = document.getElementById("hue-display");

    /**
     * 1. 开闭调色板悬浮窗
     */
    document.getElementById("palette-btn")?.addEventListener("click", function () {

        // 从 cookie 中读取 hue
        const hue = document.cookie.split('=')[1];

        // 如果直接写的话会被理解成“试图对一个可能不存在的对象的属性赋值”
        if (hue_display) {
            hue_display.textContent = hue;
        }

        slider.value = hue;

        // 再开闭调色板悬浮窗
        document.getElementById("palette")?.classList.toggle("float-panel-closed");
    });

    /**
     * 2. 点击调色板悬浮窗外部则关闭悬浮窗
     */
    function setClickOutsideToClose(panel: string, ignores: string[]) {
        document.addEventListener("click", event => {
            let panelDom = document.getElementById(panel);
            let tDom = event.target;
            if (!(tDom instanceof Node)) return;
            for (let ig of ignores) {
                let ie = document.getElementById(ig);
                if (ie == tDom || (ie?.contains(tDom))) {
                    return;
                }
            }
            panelDom!.classList.add("float-panel-closed");
        });
    }
    setClickOutsideToClose("palette", ["palette", "palette-btn"]);

    /**
     * 3. 滑动滑动条让 hue 的值改变
     */
    slider.addEventListener("input", function (e) {

        const slider_hue = (e.target as HTMLInputElement).value;

        // 写入 cookie
        document.cookie = `hue=${slider_hue}; path=/; max-age=${60 * 60 * 24 * 365}; SameSite=Lax`;

        // 读取新的 hue
        const hue = document.cookie.split('=')[1];
        // console.log(hue);

        // 将新的 hue 写到 html 标签中
        document.documentElement.style.setProperty("--hue", hue);

        // 刷新一下显示
        if (hue_display) {
            hue_display.textContent = hue;
        }
    });

    /**
     * 4. 初始化功能
     */
    document.getElementById("reset-btn")?.addEventListener("click", function () {

        // 将默认值写入 cookie
        document.cookie = `hue=250; path=/; max-age=${60 * 60 * 24 * 365}; SameSite=Lax`;

        // 读取新的 hue
        const hue = document.cookie.split('=')[1];

        // 将新的 hue 写到 html 标签中
        document.documentElement.style.setProperty("--hue", hue);

        // slider 刷一下
        slider.value = hue;

        // 刷新一下显示
        if (hue_display) {
            hue_display.textContent = hue;
        }
    });

</script>
